%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (April) ()
%%Title: (Illustrations 2010_0880.eps)
%%CreationDate: 3/14/2010 3:37 PM
%%BoundingBox: -142 141 1276 1276
%%HiResBoundingBox: -141.7329 141.7324 1275.5898 1275.5903
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0.717647 0.705882 0.662745 (R=183 G=180 B=169)
%%+ 0.796078 0.611765 0.47451 (R=203 G=156 B=121)
%%+ 0.858824 0.854902 0.831373 (R=219 G=218 B=212)
%%+ 0.890196 0.643137 0.462745 (R=227 G=164 B=118)
%%+ 0.92549 0.921569 0.905882 (R=236 G=235 B=231)
%%+ 0.929412 0.713726 0.552941 (R=237 G=182 B=141)
%%+ 0.960784 0.780392 0.643137 (R=245 G=199 B=164)
%%+ 0.980392 0.980392 0.976471 (R=250 G=250 B=249)
%%+ 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 567.5 707.8232 567.5 707.8232
%AI3_TileBox: 272.1816 323.9141 855.8613 1092.874
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1417.3229 1133.8583
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -428 1441.3232 0.5 1174 791 18 0 0 44 79 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:-176.5601 -176.5596
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
2 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 1 3 Bd
[
<
030405050506070809090A0A0B0D0E0F1011111213141516171818191A1B1C1D1E1E1F2021
>
<
020203030404040505060708090A090A0B0C0D0E0E0F100F10111213141415161517171819
>
<
030304040506070808090A0A0B0C0E0F101111131415161819191A1B1C1C1D1E2020212223
>
0
<
FAF9F8F7F7F6F5F4F3F2F1F1F0EFEEEDECEBEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDEDDDCDB
>
<
FAF9F8F7F6F6F5F4F3F2F1F0EFEEEEEDECEBEAE9E8E7E6E6E5E4E3E2E1E0DFDEDEDDDCDBDA
>
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4
>
4 %_Br
<
2123242525262728292A2B2B2C2E2F3032333334353638393A3A3B3C3D3E3F414142434445464848
494A4B
>
<
191A1B1C1D1E1D1E1F202122232426272627292A2A2B2C2D2E2F302F30313233353637383938393A
3B3C3D
>
<
2324252627282A2A2B2C2D2E2F3031323436363738393C3D3D3E3F4142434445464748494A4C4D4E
4E4F50
>
0
<
DBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCCCCCBCAC9C8C7C6C6C5C4C3C2C1C0C0BFBEBDBCBBBABA
B9B8B7
>
<
DAD9D8D7D6D5D5D4D3D2D1D0CFCECDCCCCCBCAC9C8C7C6C5C4C3C2C2C1C0BFBEBDBCBBBAB9B9B8B7
B6B5B4
>
<
D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADAC
ABAAA9
>
4 %_Br
[
0.011765 0.007843 0.011765 0 0.980392 0.980392 0.976471 2 50 0 %_BS
%_0.011765 0.007843 0.011765 0 0.980392 0.980392 0.976471 (R=250 G=250 B=249) 0 1 5 50 0 Bs
0.129412 0.098039 0.137255 0 0.858824 0.854902 0.831373 2 50 62.6374 %_BS
%_0.129412 0.098039 0.137255 0 0.858824 0.854902 0.831373 (R=219 G=218 B=212) 0 1 5 50 62.6374 Bs
0.294118 0.239216 0.313725 0 0.717647 0.705882 0.662745 2 50 100 %_BS
%_0.294118 0.239216 0.313725 0 0.717647 0.705882 0.662745 (R=183 G=180 B=169) 0 1 5 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 3 Bd
[
<
060607070808080A0A0A0A0A0C0B0D0C0C0E0D0E0E0E0F0F10101011111212121313141414151516
161617171918
>
<
3C3D3E3E3F414242434446474648494A4A4B4C4D4F4E4F5051515353555655575859595A5B5C5E5D
5F6061616263
>
<
595A5B5D5E5F60626364656668696A6B6D6E6F70707273767778797B7C7D7F80818284868788898B
8C8D8E8F9192
>
0
<
F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5
E5E5E4E4E3E3
>
<
C7C6C5C5C4C3C2C2C1C0BFBEBEBDBCBBBBBAB9B8B7B7B6B5B4B4B3B2B1B0B0AFAEADADACABAAA9A9
A8A7A6A6A5A4
>
<
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8C8B8A898887868584838281807F7E7D7C
7B7A79787776
>
4 %_Br
0.023529
0.235294
0.34902
0
0.960784
0.780392
0.643137
4 %_Br
[
0.094118 0.388235 0.572549 0 0.890196 0.643137 0.462745 2 50 100 %_BS
%_0.094118 0.388235 0.572549 0 0.890196 0.643137 0.462745 (R=227 G=164 B=118) 0 1 5 50 100 Bs
0.023529 0.235294 0.34902 0 0.960784 0.780392 0.643137 2 50 86.2944 %_BS
%_0.023529 0.235294 0.34902 0 0.960784 0.780392 0.643137 (R=245 G=199 B=164) 0 1 5 50 86.2944 Bs
0.023529 0.235294 0.34902 0 0.960784 0.780392 0.643137 2 50 0 %_BS
%_0.023529 0.235294 0.34902 0 0.960784 0.780392 0.643137 (R=245 G=199 B=164) 0 1 5 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7623.8833 8899.2783 m
-7532.0479 8899.2783 L
-7532.0479 8894.999 L
-7623.8833 8894.999 L
-7623.8833 8899.2783 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7623.6631 8896.5986 m
-7624 8896.665 -7623.4814 8896.8545 -7623.8833 8896.7119 C
-7623.8379 8896.5938 -7623.7725 8896.5049 -7623.6631 8896.5986 C
f
-7533.1675 8896.7646 m
-7534.2529 8897.5273 -7535.6816 8896.7568 -7536.8701 8897.2432 C
-7537.0098 8897.2754 -7536.8354 8896.8252 -7537.1484 8896.9258 C
-7538.3008 8897.5186 -7540.1162 8897.165 -7541.5195 8896.708 C
-7541.4346 8896.5898 L
-7541.7021 8896.5049 -7542.0283 8896.8955 -7542.3115 8896.8408 C
-7542.3135 8896.7627 -7542.2207 8896.7295 -7542.2861 8896.6211 C
-7542.3574 8896.8584 -7542.7979 8896.7314 -7542.9189 8896.9072 C
-7543.0303 8896.8154 -7543.0195 8896.6279 -7543.1641 8896.5234 C
-7543.3262 8896.793 L
-7543.7769 8897.4326 -7544.4209 8896.749 -7545.0361 8897.0791 C
-7545.0063 8897.0166 -7544.9453 8896.9678 -7544.9941 8896.9072 C
-7545.9814 8897.2959 -7547.2168 8897.2227 -7548.3208 8897.3662 C
-7548.2769 8897.2715 -7548.2363 8897.0986 -7548.3008 8896.9912 C
-7548.3555 8897.2744 -7548.6963 8897.3457 -7548.9922 8897.4014 C
-7549.1255 8897.1104 -7549.4995 8897.667 -7549.8467 8897.5059 C
-7549.8169 8897.4424 L
-7550.0732 8897.7471 -7550.1973 8897.2666 -7550.4053 8897.6318 C
-7550.5684 8897.4033 L
-7550.6807 8897.8135 -7550.9395 8897.1904 -7551.1514 8897.3994 C
-7551.1445 8897.4834 L
-7551.3442 8897.583 -7551.4482 8897.377 -7551.6338 8897.4463 C
-7551.6514 8897.3994 L
-7552.0854 8897.5059 -7552.3379 8897.2783 -7552.3271 8897.5986 C
-7552.4795 8897.3418 -7551.9063 8897.4814 -7552.1455 8897.1074 C
-7553.5732 8897.4385 -7555.0459 8897.373 -7556.4834 8897.3799 C
-7556.6465 8897.251 -7556.7505 8897.2119 -7556.7871 8897.0898 C
-7556.9307 8897.1553 -7557.3281 8897.1494 -7557.4585 8897.3135 C
-7557.4102 8897.3066 -7557.5513 8897.1494 -7557.6274 8897.1338 C
-7557.8887 8897.0127 -7557.9131 8897.4854 -7558.2002 8897.3418 C
-7558.0859 8897.2568 -7558.0469 8897.1533 -7558.0854 8897.0342 C
-7558.3301 8897.2842 -7558.6577 8897.2441 -7558.9473 8897.3252 C
-7558.9023 8897.2715 -7558.8325 8897.2393 -7558.8433 8897.1387 C
-7559.1602 8897.4219 -7559.4209 8897.0791 -7559.6982 8897.2578 C
-7559.5947 8897.0732 L
-7560.0415 8896.8486 -7559.7266 8897.46 -7560.1128 8897.3271 C
-7560.02 8897.2686 -7560.0527 8897.1963 -7560.0361 8897.1211 C
-7560.3965 8897.457 -7560.9795 8897.3457 -7561.3389 8897.46 C
-7561.3174 8897.4346 -7561.3232 8897.3838 Y
-7561.7148 8897.4258 -7562.1245 8897.3213 -7562.5552 8897.4678 C
-7562.7119 8897.3857 -7562.5039 8897.0166 -7562.9185 8897.085 C
-7562.9033 8897.4561 -7563.6221 8897.2373 -7563.3779 8897.6572 C
-7563.7319 8897.5967 -7564.2925 8897.457 -7564.5283 8897.583 C
-7564.3691 8897.4424 -7564.7007 8897.1299 -7564.4063 8897.0986 C
-7564.6289 8896.873 L
-7564.5957 8896.7217 -7564.3999 8896.9248 -7564.4707 8896.7334 C
-7564.6182 8896.749 -7565.0479 8896.8955 -7565.1797 8896.835 C
-7565.4531 8897.0625 -7565.7041 8897.4873 -7566.1465 8897.5342 C
-7565.9385 8897.3896 -7566.2646 8897.125 -7566.1235 8897.0615 C
-7566.7407 8897.7715 L
-7566.8877 8897.7891 -7566.7725 8897.4795 -7566.9854 8897.5762 C
-7566.9746 8897.6738 -7567.0674 8897.7354 -7567.1318 8897.8154 C
-7567.1875 8897.7715 -7567.7441 8897.9072 -7567.8081 8897.541 C
-7567.8735 8897.3994 -7567.5684 8897.4658 -7567.7314 8897.335 C
-7568.0029 8897.3379 -7568.0151 8897.4639 -7568.2871 8897.4697 C
-7568.2925 8897.4209 L
-7568.4717 8897.3662 -7568.8213 8897.5762 -7568.6265 8897.7783 C
-7568.5015 8897.7891 -7568.6738 8897.5586 -7568.4888 8897.665 C
-7568.6152 8897.877 -7568.9312 8897.9365 -7569.2031 8897.9395 C
-7569.1104 8897.8818 -7569.1216 8897.7842 -7569.0845 8897.6807 C
-7569.4497 8897.9678 -7569.8369 8898.0586 -7570.2451 8898.1787 C
-7570.2515 8898.3525 -7570.0928 8897.8623 -7570.0327 8897.9541 C
-7570.5557 8897.7129 -7571.1128 8898.2959 -7571.5479 8897.9434 C
-7571.4766 8897.9131 -7571.5098 8898.1904 -7571.5146 8898.1416 C
-7571.7666 8898.1201 -7571.7549 8897.8682 -7571.9189 8897.9609 C
-7571.9355 8897.8135 -7572.1255 8898.0088 -7572.2944 8898.0537 C
-7572.3818 8898.1602 -7572.3384 8897.9814 -7572.1914 8897.9658 C
-7572.4268 8898.0898 -7573.3691 8898.3174 -7573.9131 8898.1025 C
-7573.9023 8898.2002 -7574.2471 8898.4609 -7574.3721 8898.4502 C
-7574.3232 8898.2217 L
-7574.4375 8898.085 -7574.7422 8898.2412 -7574.7632 8898.0459 C
-7575.0303 8898.3232 -7573.7344 8897.8096 -7574.0957 8898.0234 C
-7574.1895 8897.833 -7574.5991 8898.3877 -7574.5215 8898.0762 C
-7574.7725 8898.085 -7575.0161 8898.3418 -7575.2559 8898.1279 C
-7575.1865 8898.165 -7575.0522 8897.8105 -7575.2549 8897.8271 C
-7575.6123 8897.8682 -7575.3564 8897.9365 -7575.6465 8898.0127 C
-7575.8281 8898.1064 L
-7575.8398 8898.3291 -7576.1475 8898.0762 -7576.0146 8898.3252 C
-7576.0586 8898.1416 -7576.5337 8898.4385 -7576.4971 8898.0693 C
-7576.4473 8897.7783 L
-7576.6016 8897.7998 -7576.7002 8898.085 -7576.8213 8898.2129 C
-7576.8418 8898.1865 -7576.8823 8898.1279 -7576.8745 8898.0811 C
-7576.8994 8898.5264 -7577.2432 8898.0439 -7577.4268 8898.3877 C
-7577.7505 8898.2334 -7578.2495 8898.373 -7578.4023 8898.0967 C
-7578.6514 8898.2314 -7578.8784 8898.3906 -7579.1621 8898.2959 C
-7579.1055 8898.2539 -7579.0283 8898.2412 -7579.0122 8898.1455 C
-7579.1904 8898.0146 -7579.2344 8898.1318 -7579.3975 8898.2041 C
-7579.3608 8898.1377 -7579.7539 8897.9434 -7579.9521 8897.7861 C
-7580.1992 8897.9189 -7580.1143 8898.1592 -7580.1392 8898.3057 C
-7580.3652 8897.8662 -7580.8379 8898.5889 -7581.1211 8898.1904 C
-7581.0352 8898.1299 -7580.7598 8897.9746 -7580.9658 8897.8643 C
-7581.1919 8897.4258 -7581.4219 8898.1875 -7581.7861 8897.9775 C
-7581.6968 8898.3418 L
-7581.8594 8898.1162 -7582.2334 8898.5537 -7582.1963 8898.1826 C
-7582.3184 8898.3135 -7582.6265 8898.0615 -7582.5859 8898.417 C
-7583.1846 8898.1162 -7584.0425 8898.5986 -7584.4102 8897.9609 C
-7584.4961 8898.0205 -7584.7104 8897.96 -7584.6665 8898.1426 C
-7584.5239 8898.3408 -7584.4673 8898.001 -7584.4141 8898.1357 C
-7584.4912 8898.1465 -7584.5078 8898.2441 -7584.5161 8898.293 C
-7584.7021 8898.2119 -7584.8486 8898.1865 -7584.6729 8897.8906 C
-7585.0869 8897.6709 -7585.1001 8898.4951 -7585.6274 8898.3555 C
-7585.6035 8898.209 -7585.6436 8898.1533 -7585.7979 8898.1768 C
-7586.0903 8898.4287 L
-7586.4312 8898.3701 -7586.2842 8898.0938 -7586.2925 8897.8447 C
-7586.4746 8897.8877 -7586.6973 8897.876 -7586.7803 8898.0615 C
-7587.0015 8897.749 L
-7586.8398 8897.9746 -7587.1514 8897.8994 -7587.2368 8897.96 C
-7587.1514 8897.8994 L
-7587.1846 8897.793 -7587.3955 8897.8584 -7587.5024 8897.8896 C
-7587.4766 8898.0439 -7587.2617 8898.1064 -7587.1445 8898.1514 C
-7587.2373 8898.2607 -7587.3823 8898.2354 -7587.5059 8898.3643 C
-7587.4648 8898.1201 -7587.8027 8898.1904 -7587.9473 8898.165 C
-7588.1133 8898.1123 -7588.1348 8898.3838 -7588.1831 8898.376 C
-7588.1875 8898.249 -7588.4541 8898.3545 -7588.3247 8898.1768 C
-7588.2681 8898.1357 -7588.1953 8898.2998 -7588.1016 8898.1875 C
-7588.2109 8898.0938 -7588.1982 8897.873 -7588.4258 8898.0342 C
-7588.5967 8898.1553 -7588.3818 8898.5166 -7588.7061 8898.3623 C
-7588.6211 8898.3018 -7588.6055 8898.2041 -7588.5391 8898.1162 C
-7588.8433 8897.9893 L
-7588.8564 8898.2119 L
-7588.8975 8898.1553 -7588.8691 8898.1357 -7588.8877 8898.1064 C
-7588.9785 8898.3408 -7589.3521 8898.1787 -7589.4209 8898.4424 C
-7589.5742 8898.4658 -7589.7441 8898.2881 -7589.8906 8898.2627 C
-7589.8623 8898.2432 L
-7590.0415 8898.1123 -7590.2793 8898.1982 -7590.4297 8898.3486 C
-7590.4219 8898.2998 L
-7590.5195 8898.2822 -7590.7505 8898.3174 -7590.8735 8898.4482 C
-7591.1201 8898.2803 -7590.9561 8897.6074 -7591.2295 8897.8877 C
-7591.48 8897.8955 -7591.6221 8898.2959 -7591.5215 8898.4385 C
-7591.9717 8898.2881 -7592.4834 8898.6514 -7592.9009 8898.3057 C
-7592.9658 8898.3955 -7592.9248 8898.4521 -7593.0586 8898.5049 C
-7593.7197 8898.417 -7594.4551 8898.7686 -7594.9814 8898.3311 C
-7594.79 8898.2373 -7594.9688 8898.1074 -7594.9727 8897.9814 C
-7595.1309 8898.1807 -7595.1631 8897.7744 -7595.2197 8898.1162 C
-7595.2041 8898.3174 -7595.2197 8898.415 -7595.0337 8898.4961 C
-7595.4282 8898.6045 -7596.0283 8898.6045 -7596.2471 8898.417 C
-7596.1377 8898.5098 -7596.2227 8898.5713 -7596.3086 8898.6318 C
-7596.2803 8898.3105 -7596.5713 8898.2627 -7596.7915 8898.376 C
-7596.8223 8898.5713 L
-7596.9658 8898.3701 L
-7597.0503 8898.4326 -7597.0591 8898.7803 -7597.2773 8898.5928 C
-7597.2891 8898.5166 -7597.3018 8898.4395 -7597.3418 8898.3838 C
-7597.5693 8898.5439 -7597.8906 8898.8154 -7598.1377 8898.6494 C
-7598.3398 8898.3643 L
-7598.4453 8898.3955 -7598.6235 8898.5674 -7598.4375 8898.6494 C
-7598.8594 8898.4775 -7599.1309 8898.4561 -7599.2646 8898.209 C
-7599.9912 8898.8105 -7601.0459 8898.835 -7601.8906 8898.792 C
-7601.8652 8898.6455 L
-7602.0923 8898.5088 -7601.9834 8898.9014 -7602.1416 8898.7998 C
-7602.0684 8898.6602 -7602.3145 8898.4961 -7602.1362 8898.3252 C
-7602.4609 8898.1709 -7602.5547 8898.5791 -7602.7656 8898.6455 C
-7602.7979 8898.8379 -7602.5957 8898.5225 -7602.6367 8898.7666 C
-7602.6729 8898.835 -7603.0859 8898.6162 -7603.1362 8898.9072 C
-7603.2178 8898.793 -7603.1543 8898.5791 -7603.1104 8898.4609 C
-7603.3086 8898.6025 L
-7603.5513 8898.2627 -7602.7559 8897.9951 -7603.0107 8897.5762 C
-7603.1934 8897.6211 L
-7603.3682 8897.3174 -7602.71 8897.2783 -7603.1689 8897.1738 C
-7603.3682 8897.3174 -7603.5381 8897.7393 -7603.3608 8897.8682 C
-7603.7754 8897.9482 -7603.5527 8898.5615 -7603.9985 8898.5371 C
-7604.1201 8898.3662 -7603.6416 8898.4961 -7603.7275 8898.2568 C
-7603.9375 8898.0225 -7604.1484 8898.3877 -7604.3354 8898.3057 C
-7604.1279 8898.415 -7604.3032 8898.709 -7604.4375 8898.7627 C
-7604.6641 8898.625 -7604.29 8898.4873 -7604.6113 8898.457 C
-7604.6641 8898.625 -7604.9595 8898.751 -7604.7041 8898.8682 C
-7604.8203 8899.249 -7605.0381 8898.7627 -7605.2129 8899.0576 C
-7605.3174 8898.7891 -7604.8823 8898.4385 -7605.2354 8898.3047 C
-7605.1792 8898.5625 -7605.6704 8898.6553 -7605.4839 8899.0371 C
-7605.6221 8898.9639 -7605.6367 8898.7607 -7605.5361 8898.6025 C
-7605.7334 8898.4434 -7606.0151 8899.0732 -7606.0801 8898.5615 C
-7606.1479 8898.8252 L
-7606.21 8898.7393 -7606.2983 8898.6738 -7606.3994 8898.5322 C
-7606.5732 8898.5273 -7606.96 8898.8896 -7606.9443 8898.4912 C
-7607 8898.5322 -7607.3975 8898.5146 -7607.2441 8898.7891 C
-7606.9971 8898.957 -7606.96 8898.5889 -7606.8223 8898.9609 C
-7606.9971 8898.6572 -7607.1787 8899.001 -7607.3213 8899.1025 C
-7607.3447 8898.9482 L
-7607.4297 8899.0088 -7607.6255 8898.9746 -7607.6787 8899.1416 C
-7607.6133 8899.0537 -7607.6475 8898.9482 -7607.7148 8898.9111 C
-7607.8042 8899.1455 L
-7608.1494 8899.2627 -7607.8857 8898.7334 -7608.2217 8898.8018 C
-7607.9663 8898.6201 L
-7608.0225 8898.6592 -7608.1367 8898.4395 -7608.2979 8898.5127 C
-7608.3604 8898.7266 -7608.4775 8898.9834 -7608.5313 8899.1494 C
-7608.7207 8899.2432 -7608.6162 8898.9082 -7608.8027 8899.1279 C
-7608.5586 8898.8701 L
-7608.5215 8898.7998 -7608.7231 8898.5166 -7608.9761 8898.5225 C
-7609.1377 8898.5967 -7609.3887 8898.9053 -7609.1338 8899.0225 C
-7609.2607 8899.0264 -7609.4385 8898.8955 -7609.3379 8898.7393 C
-7609.6255 8898.8135 -7609.2998 8898.9697 -7609.5479 8899.1025 C
-7609.6494 8898.96 -7609.9658 8898.7568 -7610.1563 8898.5498 C
-7609.8975 8898.1914 L
-7610.0693 8898.1875 L
-7609.8467 8897.9014 -7610.1826 8897.9697 -7610.0566 8897.667 C
-7610.1743 8897.6201 -7610.3169 8897.7227 -7610.4307 8897.8018 C
-7610.0864 8898.2861 -7610.8159 8898.4639 -7610.7158 8898.9053 C
-7611.1875 8899.0264 -7611.0107 8897.8311 -7611.5024 8898.5225 C
-7611.4219 8898.6377 -7611.6533 8898.9736 -7611.3564 8898.8457 C
-7611.6494 8898.7979 -7611.5557 8899.2891 -7611.9014 8899.1064 C
-7611.6455 8898.9248 -7612.1763 8898.6592 -7611.8066 8898.3955 C
-7611.8311 8898.541 -7611.6001 8898.5059 -7611.5435 8898.4658 C
-7611.6641 8898.2959 -7611.5186 8898.0205 -7611.8184 8898.0205 C
-7612.0015 8898.0625 -7612.2524 8898.0713 -7612.2158 8898.3018 C
-7612.2085 8898.5547 -7611.9365 8898.2744 -7612.0537 8898.5303 C
-7612.4185 8898.6182 -7612.4795 8898.2334 -7612.6304 8898.6826 C
-7612.3999 8898.6465 -7612.3423 8898.9072 -7612.3467 8899.0811 C
-7612.6143 8899.1865 L
-7612.5625 8899.0186 L
-7612.9922 8898.8975 -7612.6895 8899.3232 -7613.1055 8899.2783 C
-7613.3008 8898.9463 L
-7613.2017 8898.6602 -7612.6953 8899.0732 -7612.7695 8898.6074 C
-7613.04 8898.5889 -7613.1299 8898.8252 -7613.3848 8898.7051 C
-7613.3281 8898.665 -7613.2505 8898.6533 -7613.1943 8898.6123 C
-7613.2915 8898.5967 -7613.3877 8897.9795 -7613.7734 8898.3408 C
-7613.9727 8898.4814 -7613.8262 8898.5059 -7613.8311 8898.6807 C
-7614.2656 8898.7334 -7614.3955 8898.9111 -7614.6753 8898.9385 C
-7614.6177 8898.5986 -7615.1699 8898.9053 -7614.8608 8898.5576 C
-7614.7188 8898.7568 -7614.0903 8898.7373 -7613.9365 8898.4131 C
-7614.0947 8898.0098 -7613.5952 8898.4697 -7613.5024 8898.0615 C
-7613.8506 8898.0518 -7613.8335 8897.6553 -7613.8896 8897.3955 C
-7613.9863 8897.377 -7614.0801 8897.4873 -7614.1377 8897.5273 C
-7614.1787 8897.7715 -7614.0522 8897.7686 -7614.0449 8898.0205 C
-7614.4336 8897.9541 -7614.8081 8898.0898 -7615.0225 8898.3291 C
-7615.1523 8898.208 -7615.1113 8897.9639 -7614.9575 8897.9395 C
-7615.4199 8898.0127 -7615.9141 8897.9795 -7616.3535 8897.9053 C
-7616.0693 8898.3047 -7616.8433 8897.999 -7616.6494 8898.3311 C
-7616.4141 8898.4209 -7616.2119 8898.7051 -7616.3418 8898.8838 C
-7616.4888 8898.8584 -7616.3369 8898.709 -7616.3984 8898.624 C
-7616.5859 8898.8418 -7616.6895 8898.2744 -7616.8735 8898.6182 C
-7616.4512 8898.4893 -7616.7915 8898.1318 -7616.7139 8897.8193 C
-7617.0186 8897.9951 -7616.7007 8897.5967 -7617.0024 8897.5967 C
-7617.3057 8897.7705 -7617.6787 8897.9072 -7618.0161 8897.9746 C
-7618.4399 8897.6787 -7619.0898 8897.9697 -7619.4683 8897.9814 C
-7619.6665 8897.8232 -7619.5322 8897.4697 -7619.7471 8897.4082 C
-7619.9995 8897.415 -7619.5601 8897.7891 -7619.9336 8897.6279 C
-7619.8975 8897.5576 L
-7620.0107 8897.6387 -7620.5825 8897.3174 -7620.6929 8897.8252 C
-7620.5776 8897.4424 L
-7620.6475 8897.4072 -7620.7119 8897.4951 -7620.7695 8897.5361 C
-7620.7725 8897.4111 -7620.8535 8897.2979 -7620.7402 8897.2158 C
-7620.9707 8896.9521 -7621.2241 8897.2578 -7621.4746 8897.2686 C
-7621.3135 8897.4951 L
-7621.7422 8897.6729 -7622.0293 8897.4482 -7622.4443 8897.5273 C
-7622.4316 8897.3057 L
-7622.6787 8897.4385 L
-7622.6182 8897.2227 -7622.8447 8897.085 -7622.9751 8897.2646 C
-7622.3335 8896.7217 L
-7622.1553 8896.8525 -7622.5283 8896.9893 -7622.4165 8897.208 C
-7622.3213 8897.3994 -7621.9375 8897.3379 -7621.8755 8897.125 C
-7622.0225 8897.1006 -7622.0293 8897.1494 -7622.1436 8897.2295 C
-7622.1919 8896.9209 -7621.9688 8896.9326 -7621.8584 8896.7266 C
-7621.9355 8896.7393 -7622.0449 8896.6455 -7622.0615 8896.7432 C
-7621.9102 8896.5928 -7621.7578 8896.5693 -7621.5059 8896.5615 C
-7621.6763 8896.6826 -7621.4131 8896.7529 -7621.4775 8896.8408 C
-7621.4575 8896.5693 -7621.2168 8896.4854 -7620.9053 8896.5615 C
-7620.6831 8896.876 -7620.3208 8896.3594 -7619.96 8896.4463 C
-7620.1064 8896.7217 -7620.2935 8896.9424 -7620.5127 8897.0537 C
-7620.2861 8897.1914 -7620.2607 8897.0459 -7620.0337 8897.1846 C
-7619.9238 8896.9795 -7619.8457 8896.665 -7619.5503 8896.54 C
-7619.5342 8896.7432 L
-7619.2666 8896.6387 -7619.2666 8896.3379 -7618.9258 8896.3955 C
-7618.3418 8896.4951 -7617.7407 8896.4951 -7617.2949 8896.5205 C
-7617.2783 8896.7227 L
-7617.0303 8896.2891 -7616.4521 8896.5625 -7616.1182 8896.3701 C
-7615.5503 8896.5654 -7614.8848 8896.1768 -7614.5938 8896.5264 C
-7613.5913 8896.3701 -7612.7148 8896.2178 -7611.6768 8896.292 C
-7611.8516 8896.5869 L
-7611.6655 8896.3701 -7611.7305 8896.7568 -7611.5479 8896.7129 C
-7611.7578 8896.4775 -7611.2949 8896.4072 -7611.1665 8896.2266 C
-7610.7041 8896.4561 -7610.1104 8896.2051 -7609.7007 8895.999 C
-7609.6846 8896.2021 L
-7609.2705 8895.8213 -7608.7759 8896.1553 -7608.2598 8896.2178 C
-7608.2007 8896.3018 -7608.1074 8896.4922 -7607.9536 8896.4697 C
-7607.6738 8896.1416 -7607.5273 8896.165 -7607.1167 8895.96 C
-7606.8169 8895.96 -7606.3301 8896.041 -7606.0254 8896.1689 C
-7604.8975 8895.708 -7603.7456 8896.0029 -7602.5732 8895.7256 C
-7602.4888 8895.9639 L
-7601.3521 8895.4541 -7599.9541 8895.917 -7598.9839 8895.6553 C
-7599.0776 8896.0625 L
-7598.7734 8896.1875 -7598.3843 8895.9561 -7598.4619 8895.667 C
-7598.1567 8895.792 -7597.7007 8895.4697 -7597.5068 8895.8047 C
-7597.1953 8895.8799 -7597.1255 8895.6162 -7596.8662 8895.5615 C
-7596.2422 8895.7158 -7596.0107 8895.6807 -7595.4224 8895.6045 C
-7595.5684 8895.5791 L
-7595.6328 8895.6689 -7595.6387 8895.8418 -7595.4922 8895.8682 C
-7595.2725 8895.7539 -7594.6846 8895.9775 -7594.9033 8895.4912 C
-7594.2754 8895.7715 -7593.4385 8895.2627 -7592.8271 8895.6416 C
-7592.8789 8895.5088 -7592.7246 8895.4834 -7592.6602 8895.3936 C
-7592.1089 8895.3877 -7591.5293 8895.6592 -7591.0898 8895.4326 C
-7591.0024 8895.499 -7591.2295 8895.6592 -7591.0049 8895.6729 C
-7590.8721 8895.6211 -7591.0024 8895.499 -7590.8384 8895.4248 C
-7589.9453 8895.1768 -7589.0303 8895.6807 -7588.2188 8895.6162 C
-7586.7754 8895.3594 -7585.2695 8895.4893 -7583.8867 8895.4463 C
-7583.9023 8895.5439 L
-7583.4395 8895.1709 -7582.8159 8895.9258 -7582.4463 8895.3643 C
-7582.3369 8895.457 -7582.0283 8895.4082 -7582.1094 8895.5967 C
-7581.7407 8895.333 -7581.0771 8895.8447 -7580.5439 8895.5098 C
-7580.5928 8895.501 -7580.6211 8895.5205 -7580.6777 8895.5625 C
-7580.1392 8895.7783 -7579.6641 8895.4834 -7579.0957 8895.6787 C
-7579.1533 8895.7207 -7579.2583 8895.751 -7579.2754 8895.8486 C
-7579.0557 8896.0361 -7578.7549 8895.4365 -7578.6348 8895.9072 C
-7578.5088 8895.9033 -7578.5449 8895.6709 -7578.6221 8895.6846 C
-7577.3779 8895.8682 -7576.0498 8895.5674 -7574.7549 8895.46 C
-7573.8271 8895.7412 -7574.6982 8896.2529 -7573.9663 8895.9014 C
-7573.9063 8895.9922 -7573.9229 8895.7217 -7573.9131 8895.8193 C
-7573.6299 8895.6875 -7573.4717 8896.3447 -7573.2754 8896.0986 C
-7573.3564 8895.8096 -7573.1445 8895.9365 -7573.1387 8895.7607 C
-7572.5713 8895.9482 -7572.4575 8896.209 -7572.0098 8895.9893 C
-7572.0435 8896.1416 L
-7571.5186 8895.7119 -7570.9102 8895.9424 -7570.4673 8895.4463 C
-7567.5728 8895.3555 -7564.7983 8895.0811 -7561.9761 8895.0234 C
-7559.1865 8895.1182 -7556.4551 8894.8955 -7553.6221 8895.1592 C
-7552.9585 8895.5586 -7552.9087 8895.5479 -7552.1797 8895.3857 C
-7552.2095 8895.4502 -7552.2549 8895.4658 -7552.2061 8895.5264 C
-7552.1699 8895.1982 -7551.6929 8895.4951 -7551.6235 8895.1826 C
-7550.5762 8895.2432 -7549.6113 8895.1533 -7548.5337 8895.1514 C
-7548.7041 8895.1865 -7548.7896 8895.4541 -7548.5869 8895.4326 C
-7548.3755 8895.2227 L
-7548.3408 8895.3154 L
-7548.2021 8895.2666 -7548.0513 8895.1045 -7548.1943 8894.999 C
-7545.4873 8894.7158 -7542.8242 8895.373 -7540.1729 8895.293 C
-7539.5439 8895.4297 -7538.6475 8895.3047 -7537.9629 8895.2373 C
-7535.9355 8895.6738 -7534.1084 8896.0273 -7532.0479 8895.7217 C
-7532.3174 8896.5693 -7533.1675 8896.7646 V
f
-7623.2578 8896.5654 m
-7623.1855 8896.7295 -7622.9497 8896.8193 -7623.1377 8897.0371 C
-7623.1611 8896.8838 -7623.2822 8896.7119 -7623.2578 8896.5654 C
f
-7616.9619 8898.2529 m
-7616.9536 8898.2041 -7616.8721 8898.3193 -7616.8521 8898.3457 C
-7616.9297 8898.3584 -7617.0024 8898.4961 -7617.0645 8898.4111 C
-7616.9854 8898.3994 -7616.9976 8898.3213 -7616.9619 8898.2529 C
f
-7615.3521 8898.3506 m
-7615.3765 8898.4961 -7615.7207 8898.6123 -7615.9238 8898.6299 C
-7615.3521 8898.3506 L
f
-7613.8521 8898.9521 m
-7613.7227 8899.0752 -7613.7583 8899.1426 -7613.9326 8899.1387 C
-7613.9453 8899.0615 -7613.8877 8899.0225 -7613.8521 8898.9521 C
f
-7613.7456 8898.6201 m
-7613.6211 8898.6162 -7613.5591 8898.7021 -7613.4985 8898.7861 C
-7613.5029 8898.6602 -7613.7871 8898.8643 -7613.7456 8898.6201 C
f
-7610.4893 8899.0439 m
-7610.4111 8899.0322 -7610.2417 8898.9111 -7610.1689 8899.0732 C
-7610.2505 8898.96 -7610.5498 8899.2578 -7610.4893 8899.0439 C
f
-7608.9761 8898.8232 m
-7608.9272 8898.833 -7608.9072 8898.8594 -7608.8506 8898.8193 C
-7608.7607 8898.8857 -7608.8555 8898.9922 -7608.9312 8899.0059 C
-7608.9761 8898.8232 L
f
-7581.4287 8898.2373 m
-7581.5923 8898.3096 L
-7581.5684 8898.165 L
-7581.4287 8898.2373 L
f
-7569.3574 8898.2295 m
-7569.1943 8898.1377 -7569.2441 8898.3662 -7569.2168 8898.3877 C
-7569.3643 8898.4033 -7569.1621 8898.208 -7569.3574 8898.2295 C
f
-7562.8486 8897.501 m
-7562.8984 8897.5049 L
-7562.8818 8897.2051 L
-7562.8486 8897.501 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -
(1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(Black)
Pc
0.294118 0.239216 0.313725 0 0.717647 0.705882 0.662745 Xa
(R=183 G=180 B=169 1)
Pc
0.294118 0.239216 0.313725 0 0.717647 0.705882 0.662745 (R=183 G=180 B=169) 0 1 Xk
(R=183 G=180 B=169)
Pc
0.207843 0.4 0.552941 0.003922 0.796078 0.611765 0.47451 (R=203 G=156 B=121) 0 1 Xk
(R=203 G=156 B=121)
Pc
0.054902 0.313725 0.454902 0 0.929412 0.713726 0.552941 (R=237 G=182 B=141) 0 1 Xk
(R=237 G=182 B=141)
Pc
0.023529 0.235294 0.34902 0 0.960784 0.780392 0.643137 (R=245 G=199 B=164) 0 1 Xk
(R=245 G=199 B=164)
Pc
0.094118 0.388235 0.572549 0 0.890196 0.643137 0.462745 (R=227 G=164 B=118) 0 1 Xk
(R=227 G=164 B=118)
Pc
0.062745 0.047059 0.070588 0 0.92549 0.921569 0.905882 (R=236 G=235 B=231) 0 1 Xk
(R=236 G=235 B=231)
Pc
0.011765 0.007843 0.011765 0 0.980392 0.980392 0.976471 (R=250 G=250 B=249) 0 1 Xk
(R=250 G=250 B=249)
Pc
0.129412 0.098039 0.137255 0 0.858824 0.854902 0.831373 (R=219 G=218 B=212) 0 1 Xk
(R=219 G=218 B=212)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0 J 0 j 1 w 4 M []0 d0 XR
-141.7329 141.7334 m
-141.7329 1275.5903 L
1275.5898 1275.5903 L
1275.5898 141.7324 L
-141.7329 141.7334 L
Bb
0 0 0 0 Bh
1 (Unnamed gradient 1) 587.8213 759.5073 -135 625.8514 0 1 -1 0 16381.5908 -0.266602 Bg
-442.5438 442.5438 442.5438 442.5438 617.7754 687.7686 Bm
f
0 BB
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
u
0 O
0.062745 0.047059 0.070588 0 0.92549 0.921569 0.905882 (R=236 G=235 B=231) 0 1 Xk
0 J 0 j 1 w 4 M []0 d0 XR
1094.6533 329.2334 m
42.8955 329.2334 L
42.8955 1040.7534 L
1094.6533 1040.7534 L
1094.6533 329.2334 L
f
0 0 0 0 1 1 1 Xa
1051.8555 368.9736 m
85.6938 368.9736 L
85.6938 1001.0137 L
1051.8555 1001.0137 L
1051.8555 368.9736 L
f
u
0 Ap
1178.9336 787.3838 m
1172.0127 820.9434 1150.8818 822.0039 v
1129.75 823.0522 1061.4502 820.1738 y
1013.126 827.1772 1020.7734 797.0215 v
1046.4844 784.2778 l
1008.0371 771.3149 1024.7129 749.8618 v
1030.0273 741.5767 1054.5674 739.7739 v
1079.1064 737.9678 1099.4902 733.5195 y
1104.0615 721.832 l
1034.1006 716.4697 1024.8838 715.897 v
1015.667 715.3242 990.9482 693.1396 1024.9473 685.7002 c
1058.9297 678.2861 1092.9189 670.8506 y
1091.8643 649.7109 l
1045.501 658.6865 1034.084 662.3389 v
1022.667 665.9912 994 653.9912 1021.3408 636.6445 c
1062.2646 610.6797 1095.8115 602.5576 y
1092.0039 503.6768 l
1141.2676 549.8877 1152.9561 554.4531 v
1164.6377 559.0254 1173.666 567.7324 1174.7266 588.8672 c
1181.8281 605.125 1190.8545 613.8398 v
1199.8838 622.5479 1198.2969 647.8291 y
1204.666 660.6797 1210.2861 670.1357 v
1215.918 679.5889 1212.8223 698.0605 1208.998 713.1499 c
1226.2041 759.2466 1178.9336 787.3838 v
Bb
1 (Unnamed gradient 2) 1007.5518 662.9551 0 205.8164 1 0 0 1 0 0 Bg
205.8164 0 0 -327.5005 1007.5518 829.1772 Xm
8651.1553 0 0 -327.5005 -7643.603 829.1772 Bc
177.608 0 0 -327.5005 1007.5518 829.1772 Bm
28.2084 0 0 -327.5005 1185.1602 829.1772 Bm
8651.1553 0 0 -327.5005 1213.3682 829.1772 Bc
f
0 BB
/BBAccumRotation (0.215150) XT
0.054902 0.313725 0.454902 0 0.929412 0.713726 0.552941 (R=237 G=182 B=141) 0 1 Xk
1122.2051 821.1406 m
1165.2158 822.4238 1167.251 782.8164 v
1199.4326 750.8535 1169.707 728.8579 v
1099.4902 733.5195 l
1104.0615 721.832 l
1152.3945 714.8276 l
1160.3545 702.4053 1153.2383 686.1523 v
1146.1299 669.9063 1107.2676 671.2871 1092.9189 670.8506 c
1091.8643 649.7109 l
1126.2842 627.9492 1095.8115 602.5576 v
1129.4834 577.3926 l
1130.6543 566.4531 1121.626 557.7402 v
1112.584 549.0303 1096.0313 538.4111 y
1092.0039 503.6768 l
1152.9561 554.4531 l
1170.2627 568.4814 1174.7266 588.8672 v
1179.1807 609.2686 1190.8545 613.8398 y
1194.5762 630.833 1198.2969 647.8291 v
1202.0049 664.8242 1202.0049 664.8242 y
1218.9551 671.7998 1208.998 713.1499 v
1209.623 748.6196 l
1198.9775 775.8823 1178.9336 787.3838 v
1168.1895 836.0283 1122.2051 821.1406 v
f
/BBAccumRotation (0.215150) XT
0.207843 0.4 0.552941 0.003922 0.796078 0.611765 0.47451 (R=203 G=156 B=121) 0 1 Xk
1186.7393 676.4629 m
1161.4541 712.8472 l
1154.3662 723.8955 1135.2539 723.3242 v
1104.0615 721.832 l
1099.4902 733.5195 l
1154.8691 726.1704 l
1164.4268 726.4482 1176.8145 707.1211 v
1186.7393 676.4629 l
f
/BBAccumRotation (0.215150) XT
1101.9854 668.8662 m
1124.6523 663.915 l
1125.7168 647.0684 l
1098.0205 650.7422 l
1101.9854 668.8662 l
f
/BBAccumRotation (0.215150) XT
1137.9502 670.5059 m
1154.5996 659.751 1163.9434 648.207 v
1173.2988 636.667 1179.1807 609.2686 y
1167.3555 609.4736 1158.0107 621.0195 v
1148.6533 632.5605 1125.7168 647.0684 y
1124.6523 663.915 l
1088.8818 674.1123 1101.9854 668.8662 v
1115.0898 663.6309 1137.9502 670.5059 y
f
/BBAccumRotation (0.215150) XT
1053.5313 783.9204 m
1110.3887 783.3667 l
1178.291 789.8979 1195.7148 771.8403 v
1191.8887 786.9268 1178.291 789.8979 v
1105.082 791.6494 l
1035.4063 787.8799 1029.0996 791.6328 v
1053.5313 783.9204 l
f
/BBAccumRotation (0.215150) XT
0 0 0 0 1 1 1 Xa
1058.626 807.1606 m
1058.1436 802.0571 1059.7471 797.6196 1054.4941 796.229 c
1049.2412 794.8374 1036.6943 792.9751 1032.0703 799.395 c
1027.4473 805.8145 1029.4902 811.4722 1033.7109 815.0625 c
1037.9297 818.6538 1049.6465 817.71 1053.2158 816.9692 c
1056.7842 816.228 1059.1426 812.6353 1058.626 807.1606 c
f
/BBAccumRotation (0.117045) XT
1069.4629 759.3618 m
1068.0879 752.9448 1069.4629 747.0625 1062.5752 746.0791 c
1055.6875 745.0957 1039.4561 744.6035 1034.5361 753.458 c
1029.6172 762.312 1033.0605 769.2007 1038.9639 773.1348 c
1044.8672 777.0703 1059.623 774.1182 1064.0508 772.6426 c
1068.4775 771.167 1070.9395 766.2466 1069.4629 759.3618 c
f
1053.6318 698.4219 m
1052.4102 693.2529 1053.6318 688.5137 1047.5137 687.7227 c
1041.3955 686.9297 1026.9766 686.5332 1022.6064 693.666 c
1018.2373 700.7979 1021.2959 706.3467 1026.5391 709.5161 c
1031.7842 712.6865 1044.8916 710.3081 1048.8242 709.1201 c
1052.7568 707.9307 1054.9434 703.9678 1053.6318 698.4219 c
f
1046.7363 643.0723 m
1044.9766 638.7383 1045.4023 634.4502 1039.9717 634.5859 c
1034.54 634.7197 1021.9395 636.3154 1019.0967 643.1113 c
1016.2549 649.9053 1019.6631 654.3223 1024.6533 656.374 c
1029.6436 658.4277 1040.7295 654.5928 1043.9922 653.0303 c
1047.2549 651.4648 1048.624 647.7217 1046.7363 643.0723 c
f
U
u
-42.4624 787.3838 m
-35.5415 820.9434 -14.4106 822.0039 v
6.72119 823.0522 75.021 820.1738 y
123.3452 827.1772 115.6978 797.0215 v
89.9868 784.2778 l
128.4341 771.3149 111.7583 749.8618 v
106.4438 741.5767 81.9038 739.7739 v
57.3647 737.9678 36.981 733.5195 y
32.4097 721.832 l
102.3706 716.4697 111.5874 715.897 v
120.8042 715.3242 145.5229 693.1396 111.5239 685.7002 c
77.5415 678.2861 43.5522 670.8506 y
44.6069 649.7109 l
90.9702 658.6865 102.3872 662.3389 v
113.8042 665.9912 142.4712 653.9912 115.1304 636.6445 c
74.2065 610.6797 40.6597 602.5576 y
44.4673 503.6768 l
-4.79639 549.8877 -16.4849 554.4531 v
-28.1665 559.0254 -37.1948 567.7324 -38.2554 588.8672 c
-45.3569 605.125 -54.3833 613.8398 v
-63.4126 622.5479 -61.8257 647.8291 y
-68.1948 660.6797 -73.8149 670.1357 v
-79.4468 679.5889 -76.3511 698.0605 -72.5269 713.1499 c
-89.7329 759.2466 -42.4624 787.3838 v
Bb
1 (Unnamed gradient 2) 43.1035 662.9551 0 205.8154 -1 0 0 1 15420.0225 0 Bg
-205.8154 0 0 -327.5005 128.9189 829.1772 Xm
-7686.7075 0 0 -327.5005 7815.626 829.1772 Bc
-177.6072 0 0 -327.5005 128.9189 829.1772 Bm
-28.2083 0 0 -327.5005 -48.6885 829.1772 Bm
-7686.7075 0 0 -327.5005 -76.8965 829.1772 Bc
f
0 BB
/BBAccumRotation (0.215150) XT
0.054902 0.313725 0.454902 0 0.929412 0.713726 0.552941 (R=237 G=182 B=141) 0 1 Xk
14.2661 821.1406 m
-28.7446 822.4238 -30.7798 782.8164 v
-62.9614 750.8535 -33.2358 728.8579 v
36.981 733.5195 l
32.4097 721.832 l
-15.9233 714.8276 l
-23.8833 702.4053 -16.7671 686.1523 v
-9.65869 669.9063 29.2036 671.2871 43.5522 670.8506 c
44.6069 649.7109 l
10.187 627.9492 40.6597 602.5576 v
6.98779 577.3926 l
5.81689 566.4531 14.8452 557.7402 v
23.8872 549.0303 40.4399 538.4111 y
44.4673 503.6768 l
-16.4849 554.4531 l
-33.7915 568.4814 -38.2554 588.8672 v
-42.7095 609.2686 -54.3833 613.8398 y
-58.105 630.833 -61.8257 647.8291 v
-65.5337 664.8242 -65.5337 664.8242 y
-82.4839 671.7998 -72.5269 713.1499 v
-73.1519 748.6196 l
-62.5063 775.8823 -42.4624 787.3838 v
-31.7183 836.0283 14.2661 821.1406 v
f
/BBAccumRotation (0.215150) XT
0.207843 0.4 0.552941 0.003922 0.796078 0.611765 0.47451 (R=203 G=156 B=121) 0 1 Xk
-50.2681 676.4629 m
-24.9829 712.8472 l
-17.895 723.8955 1.21729 723.3242 v
32.4097 721.832 l
36.981 733.5195 l
-18.3979 726.1704 l
-27.9556 726.4482 -40.3433 707.1211 v
-50.2681 676.4629 l
f
/BBAccumRotation (0.215150) XT
34.4858 668.8662 m
11.8188 663.915 l
10.7544 647.0684 l
38.4507 650.7422 l
34.4858 668.8662 l
f
/BBAccumRotation (0.215150) XT
-1.479 670.5059 m
-18.1284 659.751 -27.4722 648.207 v
-36.8276 636.667 -42.7095 609.2686 y
-30.8843 609.4736 -21.5396 621.0195 v
-12.1821 632.5605 10.7544 647.0684 y
11.8188 663.915 l
47.5894 674.1123 34.4858 668.8662 v
21.3813 663.6309 -1.479 670.5059 y
f
/BBAccumRotation (0.215150) XT
82.9399 783.9204 m
26.0825 783.3667 l
-41.8198 789.8979 -59.2437 771.8403 v
-55.4175 786.9268 -41.8198 789.8979 v
31.3892 791.6494 l
101.0649 787.8799 107.3716 791.6328 v
82.9399 783.9204 l
f
/BBAccumRotation (0.215150) XT
0 0 0 0 1 1 1 Xa
77.8452 807.1606 m
78.3276 802.0571 76.7241 797.6196 81.9771 796.229 c
87.23 794.8374 99.7769 792.9751 104.4009 799.395 c
109.0239 805.8145 106.981 811.4722 102.7603 815.0625 c
98.5415 818.6538 86.8247 817.71 83.2554 816.9692 c
79.687 816.228 77.3286 812.6353 77.8452 807.1606 c
f
/BBAccumRotation (0.117045) XT
67.0083 759.3618 m
68.3833 752.9448 67.0083 747.0625 73.896 746.0791 c
80.7837 745.0957 97.0151 744.6035 101.9351 753.458 c
106.854 762.312 103.4106 769.2007 97.5073 773.1348 c
91.604 777.0703 76.8481 774.1182 72.4204 772.6426 c
67.9937 771.167 65.5317 766.2466 67.0083 759.3618 c
f
82.8394 698.4219 m
84.061 693.2529 82.8394 688.5137 88.9575 687.7227 c
95.0757 686.9297 109.4946 686.5332 113.8647 693.666 c
118.2339 700.7979 115.1753 706.3467 109.9321 709.5161 c
104.687 712.6865 91.5796 710.3081 87.647 709.1201 c
83.7144 707.9307 81.5278 703.9678 82.8394 698.4219 c
f
89.7349 643.0723 m
91.4946 638.7383 91.0688 634.4502 96.4995 634.5859 c
101.9312 634.7197 114.5317 636.3154 117.3745 643.1113 c
120.2163 649.9053 116.8081 654.3223 111.8179 656.374 c
106.8276 658.4277 95.7417 654.5928 92.479 653.0303 c
89.2163 651.4648 87.8472 647.7217 89.7349 643.0723 c
f
U
U
u
*u
0.294118 0.239216 0.313725 0 0.717647 0.705882 0.662745 (R=183 G=180 B=169) 0 1 Xk
213.3022 733.3096 m
216.9731 733.9214 221.7803 734.4458 227.8984 734.4458 c
235.415 734.4458 240.9214 732.6978 244.4175 729.5513 c
247.564 726.7544 249.5742 722.4717 249.5742 717.2275 c
249.5742 711.896 248.001 707.7007 245.0293 704.6416 c
240.9214 700.3584 234.4536 698.1738 227.0244 698.1738 c
224.752 698.1738 222.6543 698.2607 220.9063 698.6982 c
220.9063 675.0996 L
213.3022 675.0996 L
213.3022 733.3096 l
f
1 D
220.9063 704.9033 m
222.5669 704.4668 224.6646 704.292 227.1992 704.292 c
236.3765 704.292 241.9702 708.8369 241.9702 716.7905 c
241.9702 724.6567 236.3765 728.415 228.0732 728.415 c
224.752 728.415 222.2173 728.1528 220.9063 727.8032 C
220.9063 704.9033 l
f
*U
*u
0 D
259.0996 737.1553 m
266.791 737.1553 L
266.791 675.0996 L
259.0996 675.0996 L
259.0996 737.1553 l
f
*U
*u
309.4419 685.2383 m
309.4419 681.5674 309.6167 677.9834 310.0537 675.0996 c
303.1489 675.0996 L
302.5371 680.4307 L
302.2749 680.4307 L
299.915 677.1104 295.3701 674.1377 289.3394 674.1377 c
280.7739 674.1377 276.4038 680.1689 276.4038 686.2871 c
276.4038 696.5127 285.4937 702.1064 301.8379 702.0195 c
301.8379 702.8936 L
301.8379 706.3018 300.8765 712.6826 292.2236 712.5952 c
288.2031 712.5952 284.0952 711.459 281.1235 709.4487 c
279.3755 714.6055 L
282.8716 716.7905 288.0283 718.2764 293.3599 718.2764 c
306.2954 718.2764 309.4419 709.4487 309.4419 701.0576 C
309.4419 685.2383 l
f
1 D
302.0127 696.6885 m
293.6221 696.8623 284.0952 695.377 284.0952 687.1611 c
284.0952 682.0918 287.4165 679.8193 291.2622 679.8193 c
296.856 679.8193 300.4395 683.3154 301.6631 686.8994 c
301.9253 687.7725 302.0127 688.6475 302.0127 689.3467 C
302.0127 696.6885 l
f
*U
*u
0 D
352.0049 676.585 m
349.9946 675.624 345.5371 674.1377 339.856 674.1377 c
327.0952 674.1377 318.792 682.791 318.792 695.7266 c
318.792 708.7495 327.707 718.2764 341.5166 718.2764 c
346.0615 718.2764 350.082 717.1401 352.1797 716.0039 c
350.4316 710.1479 L
348.5962 711.1094 345.7119 712.1582 341.5166 712.1582 c
331.8149 712.1582 326.5708 704.9033 326.5708 696.1631 c
326.5708 686.374 332.8638 680.3438 341.2544 680.3438 c
345.6245 680.3438 348.5088 681.3926 350.6938 682.3545 C
352.0049 676.585 l
f
*U
*u
364.7642 694.8525 m
364.939 684.4521 371.4941 680.1689 379.2729 680.1689 c
384.7793 680.1689 388.188 681.1299 390.9849 682.3545 c
392.3833 676.8477 L
389.6738 675.624 384.9541 674.1377 378.2241 674.1377 c
365.2012 674.1377 357.4224 682.791 357.4224 695.5518 c
357.4224 708.3125 364.939 718.2764 377.2627 718.2764 c
391.1597 718.2764 394.7432 706.2148 394.7432 698.4365 c
394.7432 696.8623 394.6558 695.7266 394.481 694.8525 C
364.7642 694.8525 l
f
1 D
387.314 700.3584 m
387.4014 705.166 385.3037 712.77 376.6509 712.77 c
368.7847 712.77 365.4634 705.6904 364.8516 700.3584 C
387.314 700.3584 l
f
*U
*u
0 D
425.5918 717.4023 m
434.769 692.4053 L
435.8179 689.6084 436.8667 686.2871 437.5659 683.7529 c
437.7407 683.7529 L
438.5273 686.2871 439.4014 689.5205 440.4502 692.5801 c
448.8408 717.4023 L
456.9692 717.4023 L
445.4321 687.249 L
439.9258 672.7393 436.1675 665.3975 430.9233 660.7656 c
427.0776 657.5322 423.4067 656.2207 421.4839 655.8711 c
419.561 662.251 L
421.4839 662.8633 424.0186 664.0869 426.291 666.0098 c
428.3887 667.6709 430.9233 670.6416 432.7588 674.5752 c
433.1084 675.3623 433.3706 675.9736 433.3706 676.4111 c
433.3706 676.8477 433.1958 677.46 432.7588 678.4209 c
417.2012 717.4023 L
425.5918 717.4023 l
f
*U
*u
501.3677 696.6006 m
501.3677 680.9561 490.4424 674.1377 480.3037 674.1377 c
468.9414 674.1377 460.0264 682.5283 460.0264 695.9014 c
460.0264 709.9731 469.3784 718.2764 481.0029 718.2764 c
493.1519 718.2764 501.3677 709.4487 501.3677 696.6006 c
f
1 D
467.8926 696.1631 m
467.8926 686.8994 473.1367 679.9072 480.6533 679.9072 c
487.9951 679.9072 493.5015 686.8115 493.5015 696.3389 c
493.5015 703.5049 489.918 712.5078 480.8281 712.5078 c
471.8257 712.5078 467.8926 704.1172 467.8926 696.1631 c
f
*U
*u
0 D
546.4648 686.7236 m
546.4648 682.2666 546.5522 678.4209 546.8145 675.0996 c
539.9971 675.0996 L
539.5601 682.0049 L
539.3853 682.0049 L
537.4624 678.5957 532.9175 674.1377 525.4009 674.1377 c
518.7583 674.1377 510.8047 677.8965 510.8047 692.667 c
510.8047 717.4023 L
518.4961 717.4023 L
518.4961 694.0654 L
518.4961 686.0244 521.0308 680.5186 527.9355 680.5186 c
533.0923 680.5186 536.6758 684.1025 538.0742 687.5986 c
538.5112 688.6475 538.7734 690.0459 538.7734 691.5313 c
538.7734 717.4023 L
546.4648 717.4023 L
546.4648 686.7236 l
f
*U
*u
559.2231 704.2041 m
559.2231 709.1865 559.1357 713.4692 558.8735 717.4023 c
565.6035 717.4023 L
565.9531 709.0117 L
566.2153 709.0117 L
568.1387 714.6929 572.8574 718.2764 578.0146 718.2764 c
578.8008 718.2764 579.4131 718.189 580.1123 718.1016 c
580.1123 710.8472 L
579.3262 711.022 578.5391 711.022 577.4902 711.022 c
572.0713 711.022 568.2256 707.001 567.1768 701.2334 c
567.002 700.1846 566.9146 698.873 566.9146 697.6494 c
566.9146 675.0996 L
559.2231 675.0996 L
559.2231 704.2041 l
f
*U
*u
615.5938 727.541 m
615.5938 717.4023 L
626.6074 717.4023 L
626.6074 711.5464 L
615.5938 711.5464 L
615.5938 688.7344 L
615.5938 683.4902 617.0801 680.5186 621.3633 680.5186 c
623.4609 680.5186 624.6836 680.6934 625.8203 681.043 c
626.1699 675.1865 L
624.6836 674.6631 622.3242 674.1377 619.3525 674.1377 c
615.7695 674.1377 612.8848 675.3623 611.0488 677.3721 c
608.9512 679.7314 608.0781 683.4902 608.0781 688.4717 c
608.0781 711.5464 L
601.5225 711.5464 L
601.5225 717.4023 L
608.0781 717.4023 L
608.0781 725.2686 L
615.5938 727.541 l
f
*U
*u
639.0166 694.8525 m
639.1914 684.4521 645.7461 680.1689 653.5254 680.1689 c
659.0313 680.1689 662.4404 681.1299 665.2373 682.3545 c
666.6357 676.8477 L
663.9258 675.624 659.207 674.1377 652.4766 674.1377 c
639.4531 674.1377 631.6748 682.791 631.6748 695.5518 c
631.6748 708.3125 639.1914 718.2764 651.5156 718.2764 c
665.4121 718.2764 668.9961 706.2148 668.9961 698.4365 c
668.9961 696.8623 668.9082 695.7266 668.7334 694.8525 C
639.0166 694.8525 l
f
1 D
661.5664 700.3584 m
661.6543 705.166 659.5566 712.77 650.9033 712.77 c
643.0371 712.77 639.7158 705.6904 639.1035 700.3584 C
661.5664 700.3584 l
f
*U
*u
0 D
681.8418 717.4023 m
687.873 708.3125 L
689.5332 705.9521 690.8438 703.8545 692.2422 701.4951 c
692.418 701.4951 L
693.8164 703.9424 695.2148 706.1279 696.7002 708.3999 c
702.5566 717.4023 L
710.9473 717.4023 L
696.5254 696.9502 L
711.2969 675.0996 L
702.6436 675.0996 L
696.3506 684.626 L
694.6895 687.0732 693.291 689.4336 691.8057 691.9678 c
691.6309 691.9678 L
690.2324 689.4336 688.834 687.1611 687.1738 684.626 c
681.0547 675.0996 L
672.5771 675.0996 L
687.6104 696.6885 L
673.2764 717.4023 L
681.8418 717.4023 l
f
*U
*u
729.123 727.541 m
729.123 717.4023 L
740.1367 717.4023 L
740.1367 711.5464 L
729.123 711.5464 L
729.123 688.7344 L
729.123 683.4902 730.6094 680.5186 734.8926 680.5186 c
736.9902 680.5186 738.2129 680.6934 739.3496 681.043 c
739.6992 675.1865 L
738.2129 674.6631 735.8535 674.1377 732.8818 674.1377 c
729.2988 674.1377 726.4141 675.3623 724.5781 677.3721 c
722.4805 679.7314 721.6074 683.4902 721.6074 688.4717 c
721.6074 711.5464 L
715.0518 711.5464 L
715.0518 717.4023 L
721.6074 717.4023 L
721.6074 725.2686 L
729.123 727.541 l
f
*U
*u
767.3145 737.1553 m
775.0059 737.1553 L
775.0059 710.6724 L
775.1816 710.6724 L
776.4043 712.8574 778.3281 714.8677 780.6875 716.1787 c
782.96 717.4897 785.6699 718.2764 788.5537 718.2764 c
794.2344 718.2764 803.3242 714.7803 803.3242 700.2715 c
803.3242 675.0996 L
795.6328 675.0996 L
795.6328 699.3975 L
795.6328 706.2148 793.0986 711.896 785.8438 711.896 c
780.8623 711.896 777.0166 708.3999 775.5313 704.292 c
775.0938 703.1553 775.0059 702.0195 775.0059 700.6211 c
775.0059 675.0996 L
767.3145 675.0996 L
767.3145 737.1553 l
f
*U
*u
820.1035 694.8525 m
820.2783 684.4521 826.834 680.1689 834.6123 680.1689 c
840.1191 680.1689 843.5273 681.1299 846.3242 682.3545 c
847.7227 676.8477 L
845.0137 675.624 840.293 674.1377 833.5635 674.1377 c
820.541 674.1377 812.7617 682.791 812.7617 695.5518 c
812.7617 708.3125 820.2783 718.2764 832.6016 718.2764 c
846.499 718.2764 850.082 706.2148 850.082 698.4365 c
850.082 696.8623 849.9951 695.7266 849.8203 694.8525 C
820.1035 694.8525 l
f
1 D
842.6533 700.3584 m
842.7402 705.166 840.6426 712.77 831.9902 712.77 c
824.124 712.77 820.8027 705.6904 820.1914 700.3584 C
842.6533 700.3584 l
f
*U
*u
0 D
859.6074 704.2041 m
859.6074 709.1865 859.5195 713.4692 859.2578 717.4023 c
865.9873 717.4023 L
866.3369 709.0117 L
866.5996 709.0117 L
868.5215 714.6929 873.2422 718.2764 878.3984 718.2764 c
879.1855 718.2764 879.7969 718.189 880.4961 718.1016 c
880.4961 710.8472 L
879.709 711.022 878.9229 711.022 877.874 711.022 c
872.4551 711.022 868.6094 707.001 867.5605 701.2334 c
867.3857 700.1846 867.2988 698.873 867.2988 697.6494 c
867.2988 675.0996 L
859.6074 675.0996 L
859.6074 704.2041 l
f
*U
*u
891.5947 694.8525 m
891.7695 684.4521 898.3242 680.1689 906.1035 680.1689 c
911.6094 680.1689 915.0186 681.1299 917.8154 682.3545 c
919.2139 676.8477 L
916.5039 675.624 911.7852 674.1377 905.0547 674.1377 c
892.0313 674.1377 884.2529 682.791 884.2529 695.5518 c
884.2529 708.3125 891.7695 718.2764 904.0938 718.2764 c
917.9902 718.2764 921.5742 706.2148 921.5742 698.4365 c
921.5742 696.8623 921.4863 695.7266 921.3115 694.8525 C
891.5947 694.8525 l
f
1 D
914.1445 700.3584 m
914.2324 705.166 912.1348 712.77 903.4814 712.77 c
895.6152 712.77 892.2939 705.6904 891.6816 700.3584 C
914.1445 700.3584 l
f
*U
*u
0 D
929.6123 679.5576 m
929.6123 682.7041 931.7969 684.9756 934.8564 684.9756 c
937.916 684.9756 939.9258 682.7041 939.9258 679.5576 c
939.9258 676.498 937.916 674.1377 934.6816 674.1377 c
931.71 674.1377 929.6123 676.498 929.6123 679.5576 c
f
931.7969 691.9678 m
930.5742 734.0088 L
938.9648 734.0088 L
937.7402 691.9678 L
931.7969 691.9678 l
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
